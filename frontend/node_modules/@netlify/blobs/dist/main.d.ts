interface APICredentials {
    apiURL?: string;
    token: string;
}
interface ContextCredentials {
    contextURL: string;
    token: string;
}
interface BlobsOptions {
    authentication: APICredentials | ContextCredentials;
    context?: string;
    fetcher?: typeof globalThis.fetch;
    siteID: string;
}
interface SetOptions {
    expiration?: Date | number;
}
interface SetFilesItem extends SetOptions {
    key: string;
    path: string;
}
interface SetFilesOptions {
    concurrency?: number;
}
type BlobInput = ReadableStream | string | ArrayBuffer | Blob;
declare class Blobs {
    private authentication;
    private context;
    private fetcher;
    private siteID;
    constructor({ authentication, context, fetcher, siteID }: BlobsOptions);
    private getFinalRequest;
    private static getExpirationHeaders;
    private isConfigured;
    private makeStoreRequest;
    delete(key: string): Promise<void>;
    get(key: string): Promise<string>;
    get(key: string, { type }: {
        type: 'arrayBuffer';
    }): Promise<ArrayBuffer>;
    get(key: string, { type }: {
        type: 'blob';
    }): Promise<Blob>;
    get(key: string, { type }: {
        type: 'json';
    }): Promise<any>;
    get(key: string, { type }: {
        type: 'stream';
    }): Promise<ReadableStream>;
    get(key: string, { type }: {
        type: 'text';
    }): Promise<string>;
    set(key: string, data: BlobInput, { expiration }?: SetOptions): Promise<void>;
    setFile(key: string, path: string, { expiration }?: SetOptions): Promise<void>;
    setFiles(files: SetFilesItem[], { concurrency }?: SetFilesOptions): Promise<void[]>;
    setJSON(key: string, data: unknown, { expiration }?: SetOptions): Promise<void>;
}

export { Blobs };
